NOTES on Javascript 
1).
UI/FrontEnd information doesnt need to be sanitized like backend information.
But, also NEVER receive rw data from any user

2).
HOW TO SECURE USER INPUT DATA?
ANSWER:
FOR FRONTEND ONLY PROJECTS where there are concerns about scripting attacks, a regex validation for version control can be sufficient protection
- Always use serverside validation on data requests and the data it recieves from users (this project has no backend)
- Remember that the frontend(HTML file) is sent to the backend(server) as a HTTP request.
...HTTP are relative to the browser the user is using. Older browsers convert inputs to text
- Frontend validation is only to improve the users experience and protect aganst accidental data input errors.
-Incompataible browsers may default to user input storage as text. Nothing client side is 'safe'.
- Always use either javascript or PHP to validate the control of the elements chosen in the HTML.
- An optional use case; Instead of using REGEX the indexOf method can be used for each special character; 
ie; str.indexOf('+') !== -1 str.indexOf('#') !== -1 Etc.
Front
I had in mind something along the lines of: User input might get wrapped in a sort of wrapper that prevents code from using it in unsafe ways. That input might then need to be unwrapped in a particular way that makes it difficult for someone to UNKNOWINGLY do something unsafe with it. The code using it would need to ensure it was made safe for use in the context of that code before using it. Is there something like this that has been established? â€“ 


3).
HOW TO ALIGN FORM ELEMENTS TO HAVE THE SAME WIDTH
- Take into consideration the browser of choice by the users. all differ in how the compose the elements
- To have form elements like input properly align with output elements like; select or output, the box-sizing attribute set to border-box.
* for this project some adjustments were required with each elements margins and width

4).
The functionality of the calculator
1st - The user presses their first number button(s)
2nd - The user presser on operator button of choice. On the operator button press the operand1 variable is set to the number value and the operator variable is set to the function matching its value.
3rd -  The inputfield is immediateely cleared from the inital value and begins to display the values the user presses
4th - The user presses enter; the operand2 variable is set and the function call for the operation is initited.

/*
PSUEDO CODE:
- after the first sequence of numbers are pressed
  and ANY operator button is clicked;
1) * operand1 is set to input.value
2) * input.value is reset to undefined; clearing the input window
3) * operator is systematically set to the operator button pressed
4) * the seceond sequence of numbers entered are set to operand2
(tricky parts ahead)

4.0). (pushing Equals)- IF the equals symbol is pressed to follow then operand3 is set to the result from the function and it is displayed in the output window. operand1 and operand2 reset to undefined.
   
4.1). (NOT Pushing Equals)- IF another operator is pressed; operand1 and operand2 values are passed to the operator selected. The function simutaneosuly runs, setting operand3 as the result of the function and sets output.value to operand3.
    - Operand1 then become the value of operand3. Operand3 and operand2 are reset to undefined. The next value entered is set to operand2.
*/

5). [*IDEA* use object oriented programming to house the operator functions]
Try placing every prototype operator function in the same object.

Use that object as a direct reference. Referencing each function dynamically by its key against the buttons name.
In the cse of a match, set operator variable = to that objects value pair.


11/18/23 (0419 Hours):
I spent time rearranging the js file with the intent to clean up its readabilty and appearence
I discovered a bug i created in the process involving global vs local EC with functions and function calls
Code higher up in the execution context and out of the scope of the method/function call could not access the this.el or el.name syntaical structure that was initally used.
An easy correction involed passing in an arg to the function and **line 75-76
/* switch case example

*/

11/19/23(2315 Hours):
/* (+/-) BUTTON */
create a variable for the DOM element
on that eleemnt attach a eventlistener that contains a function to house a ternary op
use a ternary operator for the +/- feature;
when clicked, toggle the inputField.value to + or - regardless if its holding typed in numbers

/* (CE) BUTTON */
create a variable for the DOM element
on the element call a click listener with embedded function to clear global variables
on button click;
clear the operand1, operand2, operator and inputField.value

/* = */
If operand1, operand2 and operator have values;
run the operate function - pass inputField.value the return value to display

11/24/23(0517Hours):
BUG arithmic chaining is not working when operators are switched.
algorithms will have to be restructured in how they handle outcomes and assign based off;
and operator btn press and the equals btn press
